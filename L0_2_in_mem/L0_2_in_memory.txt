1.CompactionJob

callers:
DBImpl::CompactFilesImpl
DBImpl::BackgroundCompaction


2.追踪db_options

DBImpl::CompactFilesImpl
DBImpl::BackgroundCompaction 
的db_options 的参数都来自 immutable_db_options_

3.3.

TEST_F(MockEnvTest, Corrupt)
--MockEnv::NewWritableFile
----MemFile::MemFile
----MockWritableFile
--MockWritableFile::Append
----MemFile::Append

--MockEnv::NewRandomAccessFile
----MockRandomAccessFile//此时，已经有了MemFile
----MockRandomAccessFile::Read
------MemFile::Read

// Sync + corrupt => no change
--MockWritableFile::Fsync
----MockWritableFile::Sync
------MemFile::Fsync
--MockEnv::CorruptBuffer
----MemFile::CorruptBuffer
----MockRandomAccessFile::Read
------MemFile::Read

4.TEST_F(MockEnvTest, FakeSleeping)

TEST_F(MockEnvTest, FakeSleeping)
--MockEnv::FakeSleepForMicroseconds


5.Posix_env函数列表 55个

class PosixEnv : public Env {
public:
	PosixEnv();
	virtual ~PosixEnv()
	SetFD_CLOEXEC()
	NewSequentialFile()
	NewRandomAccessFile()
	OpenWritableFile()
	NewWritableFile()
	ReopenWritableFile()
	ReuseWritableFile()
	NewRandomRWFile()
	NewMemoryMappedFileBuffer()
	NewDirectory()
	FileExists()
	GetChildren()
	DeleteFile()
	CreateDir()
	CreateDirIfMissing()
	DeleteDir()
	GetFileSize()
	GetFileModificationTime()
	RenameFile()
	LinkFile()
	NumFileLinks()
	AreFilesSame()
	LockFile()
	UnlockFile()
	Schedule()
	UnSchedule()
	StartThread()
	WaitForJoin()
	GetThreadPoolQueueLen()
	GetTestDirectory()
	GetThreadList()
	gettid()
	GetThreadID()
	GetFreeSpace()
	NewLogger()
	NowMicros()
	NowNanos()
	SleepForMicroseconds()
	GetHostName()
	GetCurrentTime()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	SetAllowNonOwnerAccess()
	IncBackgroundThreadsIfNeeded()
	LowerThreadPoolIOPriority()
	LowerThreadPoolCPUPriority()
	TimeToString()
	OptimizeForLogWrite()
	OptimizeForManifestWrite()
}


6.MockEnv 函数列表 29个
class MockEnv : public EnvWrapper {
 public:                              
  MockEnv(Env* base_env);                                     
  ~MockEnv();                 
  NewSequentialFile()
  NewRandomAccessFile()                            
  NewRandomRWFile()                                  
  ReuseWritableFile()
  NewWritableFile()                            
  NewDirectory()                                   
  FileExists()                                    
  GetChildren()                                  
  DeleteFileInternal()                                    
  DeleteFile()
  Truncate()
  CreateDir()
  CreateDirIfMissing()
  DeleteDir()
  GetFileSize()
  GetFileModificationTime()
  RenameFile()
  LinkFile()
  NewLogger()
  LockFile()
  UnlockFile()
  GetTestDirectory()
  GetCurrentTime()
  NowMicros()
  NowNanos() 
  CorruptBuffer();
  FakeSleepForMicroseconds();

}

7.比较PosixEnv and MockEnv

lass PosixEnv : public Env {
public:
	PosixEnv();
	virtual ~PosixEnv()
	--SetFD_CLOEXEC()//内部使用
	OpenWritableFile()//需要实现
	ReopenWritableFile()//需要实现
	NewMemoryMappedFileBuffer()
	NumFileLinks()
	AreFilesSame()
	Schedule()
	UnSchedule()
	StartThread()
	WaitForJoin()
	GetThreadPoolQueueLen()
	GetThreadList()
	gettid()
	GetThreadID()
	GetFreeSpace()
	SleepForMicroseconds()
	GetHostName()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	SetAllowNonOwnerAccess()
	IncBackgroundThreadsIfNeeded()
	LowerThreadPoolIOPriority()
	LowerThreadPoolCPUPriority()
	TimeToString()
	OptimizeForLogWrite()
	OptimizeForManifestWrite()
}


class MockEnv : public EnvWrapper {
 public:                              
  MockEnv(Env* base_env);                                     
  ~MockEnv();                                                                                                                                                                   
  DeleteFileInternal()                                    
  Truncate()
  CorruptBuffer();
  FakeSleepForMicroseconds();
}


8.ReopenWritableFile

ReopenWritableFile
--OpenWritableFile


class EnvWrapper : public Env 中实现了 ReopenWritableFile，调用 WritableFile->ReopenWritableFile
但是MockWritableFile 没有ReopenWritableFile的接口


9、TableFileName in filename.cc

std::string TableFileName(const std::vector<DbPath>& db_paths, uint64_t number,
                          uint32_t path_id) {
  assert(number > 0); 
  std::string path;
  if (path_id >= db_paths.size()) {
    path = db_paths.back().path;
  } else {
    path = db_paths[path_id].path;
  }   
  return MakeTableFileName(path, number);
}  


10.打印语句
ROCKS_LOG_HEADER
ROCKS_LOG_INFO(immutable_db_options_.info_log, "Resuming DB");
 333       ROCKS_LOG_INFO(immutable_db_options_.info_log,
 334                      "DB resume requested but failed due to Flush failure [%s]",
 335                      s.ToString().c_str());
 
 522       ROCKS_LOG_WARN(
 523           immutable_db_options_.info_log,
 524           "Unable to Sync WAL file %s with error -- %s",
 525           LogFileName(immutable_db_options_.wal_dir, log_number).c_str(),
 526           s.ToString().c_str()); 
 
 505   struct LogReporter : public log::Reader::Reporter {
 506     Env* env;                                       
 507     Logger* info_log;                               
 508     const char* fname;                              
 509     Status* status;  // nullptr if immutable_db_options_.paranoid_checks==false
 510     virtual void Corruption(size_t bytes, const Status& s) override {
 511       ROCKS_LOG_WARN(info_log, "%s%s: dropping %d bytes; %s",
 512                      (this->status == nullptr ? "(ignoring error) " : ""),
 513                      fname, static_cast<int>(bytes), s.ToString().c_str());
 514       if (this->status != nullptr && this->status->ok()) {
 515         *this->status = s;
 516       }
 517     }
 518   }; 
 
177       ROCKS_LOG_WARN(logger,  
178                      "AllocateAligned fail to allocate huge TLB pages: %s",
179                      strerror(errno));


11.callers of TableFileName
BuildTable//重要
CompactionJob::Run
CompactionJob::FinishCompactionOutputFile
CompactionJob::OpenCompactionOutputFile
DBImpl::VerifyChecksum
DBImpl::CompactFilesImpl
DBImpl::NotifyOnCompactionBegin
DBImpl::NotifyOnCompactionCompleted
ExternalSstFileIngestionJob::Prepare
ExtractMetaData
ScanTable
TableCache::GetTableReader
Version::GetTableProperties
Version::GetPropertiesOfTablesInRange
SstFileManagerImpl::OnCompactionCompletion
SstFileManagerImpl::EnoughRoomForCompaction
Version::GetPropertiesOfAllTables


-------------.
Version::GetPropertiesOfAllTables//可以获取level
SstFileManagerImpl::EnoughRoomForCompaction

BuildTable//可以获取level
CompactionJob::Run()

12.Version::GetPropertiesOfAllTables
//可以获取level
Version::GetPropertiesOfAllTables
--

13.SstFileManagerImpl::EnoughRoomForCompaction

14.CompactionJob::Run
 687   TablePropertiesCollection tp;
 688   for (const auto& state : compact_->sub_compact_states) { 
 689     for (const auto& output : state.outputs) { 
 690       auto fn =
 691           TableFileName(state.compaction->immutable_cf_options()->cf_paths,
 692                         output.meta.fd.GetNumber(), output.meta.fd.GetPathId());
 693       tp[fn] = output.table_properties;
 694     }
 695   }  
 
 

15.to be marked
BuildTable//重要
CompactionJob::Run
CompactionJob::FinishCompactionOutputFile
CompactionJob::OpenCompactionOutputFile
DBImpl::VerifyChecksum
DBImpl::CompactFilesImpl
DBImpl::NotifyOnCompactionBegin
DBImpl::NotifyOnCompactionCompleted
ExternalSstFileIngestionJob::Prepare
ExtractMetaData
ScanTable
TableCache::GetTableReader
Version::GetTableProperties
Version::GetPropertiesOfTablesInRange
SstFileManagerImpl::OnCompactionCompletion
SstFileManagerImpl::EnoughRoomForCompaction
Version::GetPropertiesOfAllTables




100.TODO
--NewMemEnv
--明天试试直接改名字