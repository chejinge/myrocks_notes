1.CompactionJob

callers:
DBImpl::CompactFilesImpl
DBImpl::BackgroundCompaction


2.追踪db_options

DBImpl::CompactFilesImpl
DBImpl::BackgroundCompaction 
的db_options 的参数都来自 immutable_db_options_

3.3.

TEST_F(MockEnvTest, Corrupt)
--MockEnv::NewWritableFile
----MemFile::MemFile
----MockWritableFile
--MockWritableFile::Append
----MemFile::Append

--MockEnv::NewRandomAccessFile
----MockRandomAccessFile//此时，已经有了MemFile
----MockRandomAccessFile::Read
------MemFile::Read

// Sync + corrupt => no change
--MockWritableFile::Fsync
----MockWritableFile::Sync
------MemFile::Fsync
--MockEnv::CorruptBuffer
----MemFile::CorruptBuffer
----MockRandomAccessFile::Read
------MemFile::Read

4.TEST_F(MockEnvTest, FakeSleeping)

TEST_F(MockEnvTest, FakeSleeping)
--MockEnv::FakeSleepForMicroseconds


5.Posix_env函数列表 55个

class PosixEnv : public Env {
public:
	PosixEnv();
	virtual ~PosixEnv()
	SetFD_CLOEXEC()
	NewSequentialFile()
	NewRandomAccessFile()
	OpenWritableFile()
	NewWritableFile()
	ReopenWritableFile()
	ReuseWritableFile()
	NewRandomRWFile()
	NewMemoryMappedFileBuffer()
	NewDirectory()
	FileExists()
	GetChildren()
	DeleteFile()
	CreateDir()
	CreateDirIfMissing()
	DeleteDir()
	GetFileSize()
	GetFileModificationTime()
	RenameFile()
	LinkFile()
	NumFileLinks()
	AreFilesSame()
	LockFile()
	UnlockFile()
	Schedule()
	UnSchedule()
	StartThread()
	WaitForJoin()
	GetThreadPoolQueueLen()
	GetTestDirectory()
	GetThreadList()
	gettid()
	GetThreadID()
	GetFreeSpace()
	NewLogger()
	NowMicros()
	NowNanos()
	SleepForMicroseconds()
	GetHostName()
	GetCurrentTime()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	SetAllowNonOwnerAccess()
	IncBackgroundThreadsIfNeeded()
	LowerThreadPoolIOPriority()
	LowerThreadPoolCPUPriority()
	TimeToString()
	OptimizeForLogWrite()
	OptimizeForManifestWrite()
}


6.MockEnv 函数列表 29个
class MockEnv : public EnvWrapper {
 public:                              
  MockEnv(Env* base_env);                                     
  ~MockEnv();                 
  NewSequentialFile()
  NewRandomAccessFile()                            
  NewRandomRWFile()                                  
  ReuseWritableFile()
  NewWritableFile()                            
  NewDirectory()                                   
  FileExists()                                    
  GetChildren()                                  
  DeleteFileInternal()                                    
  DeleteFile()
  Truncate()
  CreateDir()
  CreateDirIfMissing()
  DeleteDir()
  GetFileSize()
  GetFileModificationTime()
  RenameFile()
  LinkFile()
  NewLogger()
  LockFile()
  UnlockFile()
  GetTestDirectory()
  GetCurrentTime()
  NowMicros()
  NowNanos() 
  CorruptBuffer();
  FakeSleepForMicroseconds();

}

7.比较PosixEnv and MockEnv

lass PosixEnv : public Env {
public:
	PosixEnv();
	virtual ~PosixEnv()
	--SetFD_CLOEXEC()//内部使用
	OpenWritableFile()//需要实现
	ReopenWritableFile()//需要实现
	NewMemoryMappedFileBuffer()
	NumFileLinks()
	AreFilesSame()
	Schedule()
	UnSchedule()
	StartThread()
	WaitForJoin()
	GetThreadPoolQueueLen()
	GetThreadList()
	gettid()
	GetThreadID()
	GetFreeSpace()
	SleepForMicroseconds()
	GetHostName()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	GetAbsolutePath()
	SetBackgroundThreads()
	GetBackgroundThreads()
	SetAllowNonOwnerAccess()
	IncBackgroundThreadsIfNeeded()
	LowerThreadPoolIOPriority()
	LowerThreadPoolCPUPriority()
	TimeToString()
	OptimizeForLogWrite()
	OptimizeForManifestWrite()
}


class MockEnv : public EnvWrapper {
 public:                              
  MockEnv(Env* base_env);                                     
  ~MockEnv();                                                                                                                                                                   
  DeleteFileInternal()                                    
  Truncate()
  CorruptBuffer();
  FakeSleepForMicroseconds();
}


8.ReopenWritableFile

ReopenWritableFile
--OpenWritableFile


class EnvWrapper : public Env 中实现了 ReopenWritableFile，调用 WritableFile->ReopenWritableFile
但是MockWritableFile 没有ReopenWritableFile的接口


9、TableFileName in filename.cc

std::string TableFileName(const std::vector<DbPath>& db_paths, uint64_t number,
                          uint32_t path_id) {
  assert(number > 0); 
  std::string path;
  if (path_id >= db_paths.size()) {
    path = db_paths.back().path;
  } else {
    path = db_paths[path_id].path;
  }   
  return MakeTableFileName(path, number);
}  


10.打印语句
ROCKS_LOG_HEADER
ROCKS_LOG_INFO(immutable_db_options_.info_log, "Resuming DB");
 333       ROCKS_LOG_INFO(immutable_db_options_.info_log,
 334                      "DB resume requested but failed due to Flush failure [%s]",
 335                      s.ToString().c_str());
 
 522       ROCKS_LOG_WARN(
 523           immutable_db_options_.info_log,
 524           "Unable to Sync WAL file %s with error -- %s",
 525           LogFileName(immutable_db_options_.wal_dir, log_number).c_str(),
 526           s.ToString().c_str()); 
 
 505   struct LogReporter : public log::Reader::Reporter {
 506     Env* env;                                       
 507     Logger* info_log;                               
 508     const char* fname;                              
 509     Status* status;  // nullptr if immutable_db_options_.paranoid_checks==false
 510     virtual void Corruption(size_t bytes, const Status& s) override {
 511       ROCKS_LOG_WARN(info_log, "%s%s: dropping %d bytes; %s",
 512                      (this->status == nullptr ? "(ignoring error) " : ""),
 513                      fname, static_cast<int>(bytes), s.ToString().c_str());
 514       if (this->status != nullptr && this->status->ok()) {
 515         *this->status = s;
 516       }
 517     }
 518   }; 
 
177       ROCKS_LOG_WARN(logger,  
178                      "AllocateAligned fail to allocate huge TLB pages: %s",
179                      strerror(errno));


11.callers of TableFileName
BuildTable//重要
CompactionJob::Run
CompactionJob::FinishCompactionOutputFile
CompactionJob::OpenCompactionOutputFile
DBImpl::VerifyChecksum
DBImpl::CompactFilesImpl
DBImpl::NotifyOnCompactionBegin
DBImpl::NotifyOnCompactionCompleted
ExternalSstFileIngestionJob::Prepare
ExtractMetaData
ScanTable
TableCache::GetTableReader
Version::GetTableProperties
Version::GetPropertiesOfTablesInRange
SstFileManagerImpl::OnCompactionCompletion
SstFileManagerImpl::EnoughRoomForCompaction
Version::GetPropertiesOfAllTables


-------------.
Version::GetPropertiesOfAllTables//可以获取level
SstFileManagerImpl::EnoughRoomForCompaction

BuildTable//可以获取level
CompactionJob::Run()

12.Version::GetPropertiesOfAllTables
//可以获取level
Version::GetPropertiesOfAllTables
--

13.SstFileManagerImpl::EnoughRoomForCompaction

14.CompactionJob::Run
 687   TablePropertiesCollection tp;
 688   for (const auto& state : compact_->sub_compact_states) { 
 689     for (const auto& output : state.outputs) { 
 690       auto fn =
 691           TableFileName(state.compaction->immutable_cf_options()->cf_paths,
 692                         output.meta.fd.GetNumber(), output.meta.fd.GetPathId());
 693       tp[fn] = output.table_properties;
 694     }
 695   }  
 
 

15.to be marked
BuildTable//重要
CompactionJob::Run
CompactionJob::FinishCompactionOutputFile
CompactionJob::OpenCompactionOutputFile
DBImpl::VerifyChecksum
DBImpl::CompactFilesImpl
DBImpl::NotifyOnCompactionBegin
DBImpl::NotifyOnCompactionCompleted
ExternalSstFileIngestionJob::Prepare
ExtractMetaData
ScanTable
TableCache::GetTableReader
Version::GetTableProperties
Version::GetPropertiesOfTablesInRange
SstFileManagerImpl::OnCompactionCompletion
SstFileManagerImpl::EnoughRoomForCompaction
Version::GetPropertiesOfAllTables


16.BuildTable
//参数有level
callers：
DBImpl::WriteLevel0TableForRecovery
FlushJob::WriteLevel0Table
ConvertLogToTable


  std::string fname = TableFileName(ioptions.cf_paths, meta->fd.GetNumber(),                                                                                                                   
                                    meta->fd.GetPathId());


17.CompactionJob::Run
callers:
DBImpl::CompactFilesImpl
DBImpl::BackgroundCompaction


  for (const auto& state : compact_->sub_compact_states) {
    for (const auto& output : state.outputs) {
      auto fn =
          TableFileName(state.compaction->immutable_cf_options()->cf_paths,                                                                                                                    
                        output.meta.fd.GetNumber(), output.meta.fd.GetPathId());
      tp[fn] = output.table_properties;
    }          
  }
  
  
  
18.CompactionJob::FinishCompactionOutputFile
callers:
CompactionJob::ProcessKeyValueCompaction

    // If there is nothing to output, no necessary to generate a sst file.
    // This happens when the output level is bottom level, at the same time
    // the sub_compact output nothing.
    std::string fname =
        TableFileName(sub_compact->compaction->immutable_cf_options()->cf_paths,                                                                                                               
                      meta->fd.GetNumber(), meta->fd.GetPathId());
                      


  if (meta != nullptr) {
    fname =
        TableFileName(sub_compact->compaction->immutable_cf_options()->cf_paths,                                                                                                               
                      meta->fd.GetNumber(), meta->fd.GetPathId());
    output_fd = meta->fd;
  }
  
  
    auto fn =
        TableFileName(sub_compact->compaction->immutable_cf_options()->cf_paths,
                      meta->fd.GetNumber(), meta->fd.GetPathId());
                      
                                            
19.CompactionJob::OpenCompactionOutputFile
db/compaction_job.cc
OpenCompactionOutputFile() 函数中：{
  ...
  std::string fname = TableFileName(sub_compact->compaction->immutable_cf_options()->cf_paths, file_number, sub_compact->compaction->output_path_id());
  ...
  Status s = NewWritableFile(env_, fname, &writable_file, env_options_);
  ...
}
这个函数是创建compaction output level文件，可以通过sub_compact->compaction->output_level()，判断他输出到第几层。

callers:
CompactionJob::Run
--CompactionJob::ProcessKeyValueCompaction


  // no need to lock because VersionSet::next_file_number_ is atomic
  uint64_t file_number = versions_->NewFileNumber();
  std::string fname =
      TableFileName(sub_compact->compaction->immutable_cf_options()->cf_paths,                                                                                                                 
                    file_number, sub_compact->compaction->output_path_id());

//之后再更新meta.fd 
1506   SubcompactionState::Output out;
1507   out.meta.fd =
1508       FileDescriptor(file_number, sub_compact->compaction->output_path_id(), 0);
1509   out.finished = false;


20.DBImpl::VerifyChecksum
可以从storage_info中获取level信息
callers:
StackableDB::VerifyChecksum

没搞明白在哪用？？只是读信息，不会创建sstable


3229     for (int i = 0; i < vstorage->num_non_empty_levels() && s.ok(); i++) {
3230       for (size_t j = 0; j < vstorage->LevelFilesBrief(i).num_files && s.ok();
3231            j++) {
3232         const auto& fd = vstorage->LevelFilesBrief(i).files[j].fd;
3233         std::string fname = TableFileName(cfd->ioptions()->cf_paths,
3234                                           fd.GetNumber(), fd.GetPathId());
3235         s = rocksdb::VerifySstFileChecksum(opts, env_options_, fname);
3236       }  
3237     } 



21.DBImpl::CompactFilesImpl
  if (output_file_names != nullptr) {
    for (const auto newf : c->edit()->GetNewFiles()) {
      (*output_file_names)
          .push_back(TableFileName(c->immutable_cf_options()->cf_paths,
                                   newf.second.fd.GetNumber(),
                                   newf.second.fd.GetPathId()));
    }
  }  
  
输入参数output_level。


 993     for (const auto newf : c->edit()->GetNewFiles()) {
 994       (*output_file_names)
 995           .push_back(TableFileName(c->immutable_cf_options()->cf_paths,                                                                                                                   
 996                                    newf.second.fd.GetNumber(),
 997                                    newf.second.fd.GetPathId()));
 998     }    

22.DBImpl::NotifyOnCompactionBegin
                                
for循环中可以获取level

caller：
DBImpl::BackgroundCompaction


1070     for (size_t i = 0; i < c->num_input_levels(); ++i) {                                                                                                                                  
1071       for (const auto fmd : *c->inputs(i)) {
1072         auto fn = TableFileName(c->immutable_cf_options()->cf_paths,
1073                                 fmd->fd.GetNumber(), fmd->fd.GetPathId());
1074         info.input_files.push_back(fn);


1084     for (const auto newf : c->edit()->GetNewFiles()) {
1085       info.output_files.push_back(TableFileName(
1086           c->immutable_cf_options()->cf_paths, newf.second.fd.GetNumber(),
1087           newf.second.fd.GetPathId()));
1088     } 



23.DBImpl::NotifyOnCompactionCompleted


for循环中可以获取level

caller：
DBImpl::BackgroundCompaction

1133     for (size_t i = 0; i < c->num_input_levels(); ++i) {
1134       for (const auto fmd : *c->inputs(i)) {
1135         auto fn = TableFileName(c->immutable_cf_options()->cf_paths,                                                                                                                      
1136                                 fmd->fd.GetNumber(), fmd->fd.GetPathId());


1147     for (const auto newf : c->edit()->GetNewFiles()) {
1148       info.output_files.push_back(TableFileName(
1149           c->immutable_cf_options()->cf_paths, newf.second.fd.GetNumber(),
1150           newf.second.fd.GetPathId()));
1151     }



24.ExternalSstFileIngestionJob::Prepare

caller

AddFile/rocksdb_ingest_external_file/rocksdb_ingest_external_file_cf
--DBImpl::IngestExternalFile
----ExternalSstFileIngestionJob::Prepare
----ExternalSstFileIngestionJob::Run
------ExternalSstFileIngestionJob::AssignLevelAndSeqnoForIngestedFile
------ExternalSstFileIngestionJob::CheckLevelForIngestedBehindFile//可选分支
--------ExternalSstFileIngestionJob::IngestedFileFitInLevel
------edit_.AddFile(f.picked_level, f.fd.GetNumber(), f.fd.GetPathId(),//in version_edit.h
                  f.fd.GetFileSize(), f.smallest_internal_key(),
                  f.largest_internal_key(), f.assigned_seqno, f.assigned_seqno,
                  false);
--------new_files_.emplace_back(level, std::move(f));

//结论：利用生成基数偶数的方法，判断放在不同的目录。写的时候根据level区分，读的时候根据需要区分位置，然后读取。

 97     const std::string path_inside_db =
 98         TableFileName(cfd_->ioptions()->cf_paths, f.fd.GetNumber(),                                                                                                                        
 99                       f.fd.GetPathId()); 
 
//这里只是准备工作？？？

25.ExtractMetaData
Repairer::Run
--ExtractMetaData


459         std::string fname = TableFileName(
460             db_options_.db_paths, t.meta.fd.GetNumber(), t.meta.fd.GetPathId());


26.ScanTable

ExtractMetaData
--ScanTable

474     std::string fname = TableFileName(                                                                                                                                                     
475         db_options_.db_paths, t->meta.fd.GetNumber(), t->meta.fd.GetPathId());

            
27.TableCache::GetTableReader
100   std::string fname =
101       TableFileName(ioptions_.cf_paths, fd.GetNumber(), fd.GetPathId());    
102   std::unique_ptr<RandomAccessFile> file;        
103   Status s = ioptions_.env->NewRandomAccessFile(fname, &file, env_options);            
            
            
40.FileDescriptor
// A copyable structure contains information needed to read data from an SST
// file. It can contain a pointer to a table reader opened for the file, or
// file number and size, which can be used to create a new table reader for it.
// The behavior is undefined when a copied of the structure is used when the
// file is not in any live version any more.
struct FileDescriptor {
  // Table reader in table_reader_handle
  TableReader* table_reader;
  uint64_t packed_number_and_path_id;
  uint64_t file_size;  // File size in bytes
  SequenceNumber smallest_seqno;  // The smallest seqno in this file
  SequenceNumber largest_seqno;   // The largest seqno in this file
  uint64_t GetNumber() const {
    return packed_number_and_path_id & kFileNumberMask;
  }
  uint32_t GetPathId() const {
    return static_cast<uint32_t>(
        packed_number_and_path_id / (kFileNumberMask + 1));
  }
  uint64_t GetFileSize() const { return file_size; }
};

                    

100.TODO
--NewMemEnv
--明天试试直接改名字