1.Level Compaciton 【compaction 流程】
	（1）按score排序加入队列
	（2）根据minkey：maxkey选择本层SST
	（3）根据minkey：maxkey选择下层SST
	（4）将涉及的SST组成compaction
	（5）构造compaction job
	（6）job run
	
2. compaction 触发条件
compaction触发机制是通过判断 各个 level

Total File Size
SST 个数
是否超过配置，来决定是否发生 compaction。

【level 0 触发条件】

SST 文件个数达到参数 level0_file_num_compaction_trigger
level 0 的 file size 超过 max_bytes_for_level_base
【level 1~n 触发条件】

level n 当前的 total file size 是否 大于 max_bytes_for_level_base
注：max_bytes_for_level_base 又称作 Target Size。

3.compaction 优先级计算score

	当多个 level 同时达到触发条件时，需要确定 compaction 的先后顺序。
		
	因此，各个 level 需要计算出一个值 score，score 大的值先执行 compaction。
	
	RocksDB 中通过一个任务队列维护compaction任务，score 大的 level 优先加入任务队列等待处理。
	
	score 的计算方式如下：
	
	【level 0】： Snum = total file num / level0_file_num_compaction_trigger
	
	             Ssize = total file size / max_bytes_for_level_base
	
	             level 0 score = max(Snum, Sszie)

	同时，level 0 的 compaction 操作会影响写入。
	
	为了不影响写入，直接将 level 0 的 score 调高，优先 compaction。
	
	具体调整方式如下：
	level0_file_num_compaction_trigger，	4，	num 为 4 时，达到 compact 条件，															4 <= num < 20 时 Score = num / 4
	level0_slow_down_writes_trigger，  	20，	num 为 20 时，RocksDB 会减慢写入速度，													20 <= num && num < 24 时 Score = 10000
	level0_stop_writes_trigger，					24，	num 为 24 时，RocksDB 停止写入文件，尽快对 L0 进行 compact，		 24 <= num 时 Score = 1000000
	
	【level 1~】：score = Level 1 ~ n file size / max_bytes_for_level_base


4.compaction 动态调整触发条件
	每层的 Target Size 都不同，通过 level_compaction_dynamic_level_bytes （true / false） 配置 Target Size  的动态调整。
	
	【level_compaction_dynamic_level_bytes 为 false】关闭动态调整，target size 计算规则如下：
	
	【level 0 的 target size】：max_bytes_for_level_base 的值
	【level n 的 target size】：Target_Size(Ln+1) = Target_Size(Ln) * max_bytes_for_level_multiplier * max_bytes_for_level_multiplier_additional[n]
	相关参数
	max_bytes_for_level_multiplier：乘法因子
	max_bytes_for_level_multiplier_additional[n]：各 level 的调整参数，默认为1
	 
	
	【例如】：level 1 的 max_bytes_for_level_base 是 10GB，max_bytes_for_level_multiplier=10，max_bytes_for_level_multiplier_additional[1]=1。
	
	则 level 1，2，3，4 的 max_bytes_for_level_base 分别为：10GB，100GB，1000GB，10000GB
	
	【level_compaction_dynamic_level_bytes 为 true】动态调整，target size 计算规则如下：
	
	设：有 n 个 level，则 max_bytes_for_level_base 为最后一个 level n 的数据量阈值
	
	level n-1 = level n / max_bytes_for_level_multiplier。
	【例如】：n=6，level n size = 276GB，max_bytes_for_level_multiplier = 10，则 level 1 ~ level 6 的 target size 为：
	
	 	
	level 1：0
	level 2：0
	level 3：0.276 GB
	level 4: 2.76 GB
	level 5: 27.6 GB
	level 6: 276 GB
	

5.compaction 并发执行
	多个并发任务不会有重叠的key
	为提高并发，rocksDB 通过 max_subcompactions 参数，能够将一个文件拆分为多个子任务，并发执行，类似于表级并行复制。

6.配置项
	options.max_bytes_for_level_base: 每层存放 SST 的数据量限制
	
	options.level_compaction_dynamic_level_bytes: 动态每层存放 SST 的数据量限制（level SST size limitation）
	
	options.max_bytes_for_level_multiplier and options.max_bytes_for_level_multiplier_additional: 动态调整 level size limitation 时的系数
	
	options.expanded_compaction_factor: 待确认
	
	options.source_compaction_factor: 待确认
	
	options.max_grandparent_overlap_factor: only for level-based compactions 待确认
	
	options.soft_rate_limit and options.hard_rate_limit: deprecated  待确认

	options.hard_pending_compaction_bytes_limit: only used for level-based compaction 待确认

	options.compaction_pri: only supported in level-based compaction  待确认

7.Manual Compaction
	用户可以直接手动发起 compaction。
	
	【适用场景】
	
	将数据 compaction 到 最底层，减少写放大，适用于 读负载高的业务；
	修改 level num，将指定范围内的数据压缩到最底层，然后将文件直接迁移到指定的 level；
	修改配置（例如：压缩算法、block size、bloom filter settings、索引格式）。
	【使用方式】
	
	mysql> set session rocksdb_manual_compaction_threads=16;
	Query OK, 0 rows affected (0.00 sec)
	 
	mysql> set global rocksdb_compact_cf='cf_node_pk';
	Query OK, 0 rows affected (25 min 13.80 sec)
	【注意事项】
	
	手动触发 compaction 会导致终端挂起，直至 compaction 结束
	多个 session 发出 compaction 请求，请求会被添加到 FIFO 队列，顺序执行
	MyRocks 同一时刻只能执行一个手动 campaction 请求
	发起 compaction 请求的终端断开连接，若请求未开始则会被取消
	以开始处理的 compaction 请求无法终止


DBImpl::RunManualCompaction
--env_->Schedule(&DBImpl::BGWorkCompaction, ca, Env::Priority::LOW, this,&DBImpl::UnscheduleCallback);
--DBImpl::BGWorkCompaction
----DBImpl::BackgroundCallCompaction
------DBImpl::BackgroundCompaction
--------PopFirstFromCompactionQueue
--------CompactionJob compaction_job
--------compaction_job.Prepare
--------compaction_job.Run
--------c->ReleaseCompactionFiles
--------NotifyOnCompactionCompleted