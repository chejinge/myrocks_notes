1.读流程概要描述：

【Read 流程】如下：

在 MemTable 中查找，无法命中转到下一流程；
在 immutable memtable 中查找，查找不中转到下一流程；
在第0层SSTable中查找，无法命中转到下一流程；
对于L0 的文件，RocksDB 采用遍历的方法查找，所以为了查找效率 RocksDB 会控制 L0 的文件个数。
在剩余SSTable中查找。
对于 L1 层以及 L1 层以上层级的文件，每个 SSTable 没有交叠，即 Key 没有重复，可以使用二分查找快速找到 key 所在的 Level 以及 SST。


2.read流程图

mysql_execute_command
--execute_sqlcom_select
----handle_select
------mysql_select
--------mysql_execute_select
----------JOIN::exec
------------do_select
--------------sub_select
----------------join_init_read_record
------------------init_read_record
--------------------handler::ha_rnd_init
----------------------myrocks::ha_rocksdb::rnd_init

myrocks::ha_rocksdb::rnd_init
--myrocks::get_or_create_tx
--myrocks::ha_rocksdb::setup_read_decoders
--myrocks::ha_rocksdb::setup_iterator_for_rnd_scan
----myrocks::Rdb_key_def::get_first_key
------myrocks::Rdb_key_def::get_infimum_key
--------myrocks::rdb_netbuf_store_index
----myrocks::ha_rocksdb::setup_scan_iterator
------myrocks::get_or_create_tx
------myrocks::ha_rocksdb::check_bloom_and_set_bounds
--------myrocks::ha_rocksdb::can_use_bloom_filter
--------myrocks::ha_rocksdb::setup_iterator_bounds
------myrocks::Rdb_transaction::get_iterator
--------myrocks::Rdb_transaction_impl::acquire_snapshot
----------TransactionBaseImpl::SetSnapshot
------------rocksdb::DBImpl::GetSnapshotForWriteConflictBoundary
--------------rocksdb::DBImpl::GetSnapshotImpl
----------------rocksdb::SnapshotList::New
------------rocksdb::TransactionBaseImpl::SetSnapshotInternal
----------rocksdb::TransactionBaseImpl::GetSnapshot
----------myrocks::Rdb_transaction::snapshot_created
----rocksdb::BaseDeltaIterator::Seek//setup_iterator_for_rnd_scan
------rocksdb::DBIter::Seek
--------rocksdb::MemTableIterator::Seek
----------rocksdb::(anonymous namespace)::SkipListRep::Iterator::Seek
------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::Iterator::Seek
--------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::FindGreaterOrEqual 
--------rocksdb::DBIter::FindNextUserEntry
----------rocksdb::DBIter::FindNextUserEntryInternal
------rocksdb::WBWIIteratorImpl::Seek
--------rocksdb::SkipList<rocksdb::WriteBatchIndexEntry*, rocksdb::WriteBatchEntryComparator const&>::Iterator::Seek
----------rocksdb::SkipList<rocksdb::WriteBatchIndexEntry*, rocksdb::WriteBatchEntryComparator const&>::FindGreaterOrEqual
------rocksdb::BaseDeltaIterator::UpdateCurrent


do_select
--sub_select
----join_init_read_record
------init_read_record
--------handler::ha_rnd_init
----------myrocks::ha_rocksdb::rnd_init
----rr_sequential
------handler::ha_rnd_next
--------myrocks::ha_rocksdb::rnd_next
----------myrocks::ha_rocksdb::rnd_next_with_direction
------------rocksdb::BaseDeltaIterator::Next
--------------rocksdb::BaseDeltaIterator::Advance
----------------rocksdb::BaseDeltaIterator::AdvanceBase
----------------rocksdb::ArenaWrappedDBIter::Next
------------------rocksdb::ArenaWrappedDBIter::Next
--------------------rocksdb::DBIter::Next
----------------------rocksdb::MemTableIterator::Next
------------------------rocksdb::(anonymous namespace)::SkipListRep::Iterator::Next 
--------------------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::Node::Next
----------------------rocksdb::DBIter::FindNextUserEntry
------------------------rocksdb::DBIter::FindNextUserEntryInternal
----------------rocksdb::BaseDeltaIterator::UpdateCurrent
------------myrocks::ha_rocksdb::convert_record_from_storage_format
--------------myrocks::ha_rocksdb::convert_field_from_storage_format
--------------Field::move_field
--------------myrocks::ha_rocksdb::convert_varchar_from_storage_format
----evaluate_join_record
------myrocks::ha_rocksdb::unlock_row


3.整体逻辑
RocksDB的读相关操作在逻辑上并不复杂，基本继承了LevelDB的流程步骤，但在细节上有了很多优化，并额外引入了column family的概念。

--对外接口层
		DB：level最外层接口
		Snapshot：主要作用是记录当前sequenceNumber，干涉compaction的合并数据。
		
--逻辑层
		DBImpl：组织各个组件的中控层。
		VersionSet: 管理所有Version的生命周期。
		Version：1.接受最外层接口的请求，并转发到sstable层，同时记录compaction的状态。2.管理iterators。3.管理mainfest文件。
		
--存储层
		SSTable：管理levelDB文件存储层的核心组件。
		Memtable：核心操作由skiplist实现。
		Log::Writer：写入binlog
		
--OS适配层
		Env：操作系统接口，负责对接操作系统功能，隐藏系统细节。包括：1.文件操作。2.定时任务。
		
当用户通过Get（）接口进行key-value pair搜索时，会拿到一个超级版本supper version，并依次从memtable、immutable memtable队列、sstable缓存中搜索。

4.对外接口
	RocksDB 对外提供了Get(key), Put(key), Delete(key) and NewIterator()等操作，我们可以直接从官方的文档里面找到测试程序，以此为入口开始代码分析（examples/c_simple_example.c）。
	代码中的rocksdb_put、rocksdb_get作为全局函数调用DB::put/DB:get接口，本质是调用的数据库实现类DBImpl的操作。
	写入过程中key和value被打包成slice对象传入put接口，写入WriteBatch，后续将批量写入Memtable。
	Slice由一个size变量和一个指向外部内存区域的指针构成。使用slice可以减少之后的key、value在传值过程中的拷贝操作。
	而在读的过程中，引入了PinnabeSlice作为引用出参，同样是减少内存拷贝，并做到了生命周期控制，防止block_cache中的数据在返回前被释放，最终get不到数据的问题。（BlockIter退出前通过DelegateCleanUpsTo将cleanup交给PinnabeSlice）		

main//c_simple_example
--rocksdb_options_create
--rocksdb_open
--rocksdb_readoptions_create
--rocksdb_get(db, readoptions, key, strlen(key), &len, &err)
----db->rep->Get(options->rep, Slice(key, keylen), &tmp);
------DB::Get
--------DBImpl::Get
----------DBImpl::GetImpl
------------if (!skip_memtable)
--------------MemTable::Get//sv->mem->Get
--------------sv->imm->Get
------------else
--------------sv->current->Get
--rocksdb_close(db)


5.数据库实现层逻辑
	Rocksdb::DB是个抽象基类，其中定义些纯虚函数，包括Get，Put操作等，具体实现时调用它的子类rocksdb::DBImpl实现这些接口功能。Get的功能就是油DBImpl::GetImpl完成。
	其中通过SuperVersion可以找到当前的Memtable、Immutable Memtable队列、以及当前Version（由此可以找到当前版本的sstable结构中的所有文件），它是由columnfamily提供维护的。
	而Version时由一个时间点所有有效SST文件组成。每次campact完成，将会创建新的version。
	旧版本的super version和version在引用为零时会被清除。
	
	SuperVersion数据结构定义
	// holds references to memtable, all immutable memtables and version
	struct SuperVersion {
	  // Accessing members of this class is not thread-safe and requires external
	  // synchronization (ie db mutex held or on write thread).
	  MemTable* mem;                                                                                                                                                                                                                                                
	  MemTableListVersion* imm;
	  Version* current;
  
  
DBImpl::GetImpl
--if (!skip_memtable)
----MemTable::Get//sv->mem->Get
----MemTableListVersion::Get//sv->imm->Get
--else
----Version::Get//sv->current->Get
--ReturnAndCleanupSuperVersion


6.在内存中搜索
MemTable::Get
--std::unique_ptr<InternalIterator> range_del_iter(NewRangeTombstoneIterator(read_opts));
--range_del_agg->AddTombstones(std::move(range_del_iter));
--prefix_bloom_->MayContain(prefix_extractor_->Transform(user_key));
--MemTableRep::Get//table_->Get
----MemTableRep::GetDynamicPrefixIterator
------GetIterator
--------SkipListRep::Iterator(&skip_list_);
----SkipListRep::Iterator::Seek//iter->Seek(k.internal_key(), k.memtable_key().data())
------InlineSkipList<Comparator>::Iterator::Seek
--------InlineSkipList<Comparator>::FindGreaterOrEqual
----SaveValue//返回true代表还要next，false就是不用继续了。
------s->mem->GetInternalKeyComparator().user_comparator()->Equal//如果不相等，则返回，说明不在memtable
--------DecodeFixed64(key_ptr + key_length - 8)
--------UnPackSequenceAndType(tag, &seq, &type);
--------if ((type == kTypeValue || type == kTypeMerge || type == kTypeBlobIndex) && range_del_agg->ShouldDelete(Slice(key_ptr, key_length))) {
      		type = kTypeRangeDeletion;}  
------switch (type)
--------case kTypeBlobIndex：
--------case kTypeValue:
----------s->value->assign(v.data(), v.size());//找到，value赋值
----------*(s->found_final_value) = true;
--------case kTypeDeletion:
----------*(s->status) = Status::NotFound();
----------*(s->found_final_value) = true;
--------case kTypeMerge:
----------merge_context->PushOperand
----------if (merge_operator->ShouldMerge)
------------MergeHelper::TimedFullMerge
------------*(s->found_final_value) = true;


在Memtable和Immutable memtable中搜索调用的函数是一致的。其默认实现是基于跳表完成的。
跳表迭代器SkipListRep::Iterator iter通过FindGreaterOrEqual实现搜索定位，并根据获得目标对象的key决定是继续搜索还是返回结果。

值得注意的是，rocksdb引入了范围删除和Merge等运算操作，所以在值类型判断的时候要比leveldb复杂的多。
具体流程如下：
	1.在Memtable中找到一个大于等于该值的节点
	2.根据不同情况决定是否向下执行：
			--User Key不等，直接失败。-------------->查找失败，Merge Context被传到下一级查找。。
			--User Key相等，查找成功
			--类型为Merge，将Merge内容记入Merge Context，向下查找。


7.在sstable中搜索
如果在内存中没有得到结果，那么下一步就是从sstable中找寻了。但是这一步并不是马上会产生I/O,因为rocksdb/leveldb都做了一定程度的cache（table cache/block cache），只有cache中没有的时候才回去读磁盘。
Version::Get
--GetContext get_context()
--pinned_iters_mgr.StartPinning();
--FilePicker fp()
--FdWithKeyRange* f = fp.GetNextFile()
----while (!search_ended_) {  // Loops over different levels.
      while (curr_index_in_curr_level_ < curr_file_level_->num_files) {
------if (num_levels_ > 1 || curr_file_level_->num_files > 3)
--------fractional cascading优化寻找SST的方法 FileIndexer.
------else
--------层内顺序访问sst文件（已经排序）
--------PrepareNextLevel（Binary Search决定候选文件）

--while (f != nullptr) 
----*status = table_cache_->Get
----switch (get_context.State())
------case GetContext::kNotFound:
				break；
------case GetContext::kMerge:
				break;
------case GetContext::kFound:
				return//stop while
------case GetContext::kDeleted:
        // Use empty error message for speed
        *status = Status::NotFound();
        return;
      case GetContext::kCorrupt:
        *status = Status::Corruption("corrupted key for ", user_key);
        return;
      case GetContext::kBlobIndex:
        ROCKS_LOG_ERROR(info_log_, "Encounter unexpected blob index.");
        *status = Status::NotSupported
----f = fp.GetNextFile();

--if (GetContext::kMerge == get_context.State())//begin the merge
----*status = MergeHelper::TimedFullMerge
----if (LIKELY(value != nullptr))
------value->PinSelf()
----else
------*status = Status::NotFound(); // Use an empty error message for speed

这里面有两个函数值得注意，一个是GetNextFile（）明确了我们每一次去读哪个文件，按什么顺序读。另一个是TableCache::Get明确了每个文件我们怎么读里面的内容。

在GetNextFile中，RocksDB实现了一个基于FileIndexer得fractional cascading优化寻找sst算法。
常规的办法是通过两层循环先在每层内全局二分搜索，然后从0层循环到最高层。
通过维护FileIndexer，对于第1层以上的层且层文件数多于3个时，可以根据之前上一层读过的最后一个文件的key-range和要搜索的key值，对本层要读的sstable文件进行范围收紧。
这里有最多五种不同情况，每一种都可以至少确定一个right_bound或者left_bound。


TableCache::Get
--//可能有优化
--// Check row cache if enabled. Since row cache does not currently store
  // sequence numbers, we cannot use it if we need to fetch the sequence.
  if (ioptions_.row_cache && !get_context->NeedToReadSequence()) {      
--TableCache::FindTable
----number = fd.GetNumber();
----key = GetSliceForFileNumber(&number);
----*handle = cache_->Lookup(key);//根据fd查找内存中是否有sst对应的table
----if (*handle == nullptr)
------GetTableReader
--------//ioptions_.table_factory->NewTableReader
--------BlockBasedTableFactory::NewTableReader
----------BlockBasedTable::Open
----cache_->Insert//将新建的table插入cache，以备下次读。
----return s;//返回table对象，table在cache中，通过handle拿

--t = GetTableReaderFromHandle(handle)
--std::unique_ptr<InternalIterator> range_del_iter(t->NewRangeTombstoneIterator(options));
--get_context->range_del_agg()->AddTombstones(std::move(range_del_iter))
--BlockBasedTable::Get//t->Get(options, k, get_context, skip_filters)
----filter_entry = GetFilter
----if (!FullFilterKeyMayMatch)
				return
----if (FullFilterKeyMayMatch)
------iiter = NewIndexIterator
------for (iiter->Seek(key); iiter->Valid() && !done; iiter->Next()) 
--------handle_value = iiter->value();
--------bool not_exist_in_filter =
          filter != nullptr && filter->IsBlockBased() == true &&
          handle.DecodeFrom(&handle_value).ok() &&
          !filter->KeyMayMatch(ExtractUserKey(key), handle.offset(), no_io);
--------if (not_exist_in_filter)
					break;
--------else exist
----------BlockBasedTable::NewDataBlockIterator//注意在这里把数据load到
------------MaybeLoadDataBlockToCache
------------ReadBlockFromFile
----------for (biter.Seek(key); biter.Valid(); biter.Next())
------------get_context->SaveValue(parsed_key, biter.value(), &biter))


其中的FindTable实现从缓存中去拿选出的sstable文件的基本元信息，如果缓存里面没有就需要先创建（BlockBasedTable::Open）一个，同时还要插入缓存（cache_->Insert）。
Open涉及的内容很多，主要是通过读footer在TableReader对象里面缓存meta block和index block里面的信息。
然后就是BlockBasedTable::Get去根据table拿到key-value了。首先考虑拿过滤器判断想搜索的内容是否可能存在。
接着用NewIndexIterator去seek值被包括的块，优先尝试从cache中读这个快，然后再考虑用过滤器判断值是否在块内，
最后用 NewDataBlockIterator去seek快内的值。最后SaveValue按照key-value的类型决定返回还是继续搜索。


读流程逻辑步骤：
	-- 找到一个可能含有Key的文件（sst fraction cascading）
	-- 从TableCache中查找Table Reader
	-- 使用FullFilter对文件进行过滤
	-- 如果包含，使用Index定位block位置
	-- 使用BlockFilter对Block进行过滤
	-- 在DataBlock中搜索记录。




8.读流程
select * from t where id=1
	-- 在 WriteBatch 中查找
	-- 在Memable 中查找
	-- 在 Immutable MemTable 中查找
	-- 在Block Cache和SST 文件中查找


9.Fraction Cascading
 1层以上并且该层文件数多于3才会执行。
 在某一层进行查询时，会根据比较的结果设置查询的上限和下限。
 在下一层进行查询时，会使用这个查询的上限和下限减少文件搜索的范围。
 
还是没搞明白什么是 Fraction Cascading.
  
10.读流程 iterator操作相关
构建数据的 Iterator
通过Seek函数定位 记录的可能位置
执行Next并进行过 滤，合并


 Iterator 
	 Seek 
	 Next
	 Prev
	 SeekToFirst 
	 SeekToLast 
	 key
	 value

DBIter
--MergingIterator
---- MemTable Iterator
---- Table Iterator

上层Iterator的Seek或Next函数会调用下层Iterator的Seek或Next函数， 取决于上层Iterator的工作内容，下层Iterator的相应函数可能会调用多次。

11.范围查询搜索过程

select * from t where id>=1 层级搜索
		1. 通过VersionStroageInfo类可以获得文件元数据，包括每个文件包含Key的最大 值和最小值等，这些信息随文件的变化而维护。
		2. 通过二分搜索找到可能包含Key的文件。
		3. 对于第0层，由于范围重叠，必须要扫描每个文件。


select * from t where id>=1 文件内部搜索
		1. 从Footer定位 IndexBlock
		2. 使用Index Block得到offset， 计算filter编号， 然后使用Filter Block中的offset array获得filter， 使用filter与Key 判断是否Match
		3. 根据offset，获 取Data Block


select * from t where id>=1 Index搜索
		每个Data Block有一个 索引项，索引项的Key 大于等于前Data Block 的最大Key，小于后 Data Block的最小Key.


select * from t where id>=1 Block内部搜索
		1. 从结尾读取 num_restarts获得 Restart数组的起始位 置，由于每个Restart 项长度固定，可以计算 出第i个项的位置。
		2. 在Restart Point 区域二分查询，找 到恰好较小的重启 点。
		3. 使用重启点定位 一条Record，向下 顺序搜索，找到恰 好较大或等于的记 录。

select * from t where id>=1 合并与遍历
		1.使用堆排序将 多层列表合并 为一个
		2.在遍历这个有 序列表时，去 除新版本元素
		3.去除重复、被 删除的元素， 并做Merge
		4.将WriteBatch 的操作更新到 列表上
		
12.MVCC
	--MVCC实现
		 当前事务的写入在提交前存储在自己的WriteBatch中，其他事务读取不到。
		 RR隔离级别下，事务的读取在第一次执行读取操作时获取SequenceNumber。 
		 读取过程中会过滤大于SequenceNumber的记录。

	--MVCC等值查询和范围查询
		 在等值查询和范围查询中略有不同。
		 等值查询中，当在Iterator中执行Seek操作时，由于Key的比较规则， SequenceNumber较大的项已被跳过，而在Next操作中，不会找到不等于目标 Key的项;
		 而在范围查询中Sequence Number较大的项可能在Next操作中被取出来，因此 需要再次进行过滤。
		
	--范围查询例子
		Select * from t where id >= 5;
		给出一个Seek和Next过程中实现MVCC的例子，假设有列表(元素格式为Key: SequenceNumber):[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，当前快照Sequence Number值为9.
		Seek(5)
		[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]
		Next
		1, 向前一步，得到[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，发现重复，跳过。
		2, 向前两步，得到[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，Sequence Number不符合跳过。 3, 向前三步，得到[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，符合，Next结束。		
		
		
等值查询
	Memtable
	--SkipList iterator
	--TableReader(Filter, MVCC)
	----Block Iterator
	--GetContext(Merge)//会一直传下去
	
范围查询		
	MemTableIterator
	--SkipList Iterator
	DBIter(去重，MVCC，Merge)	
	TableIterator (Filter)
	--BlockIterator
		
		
		
		
		