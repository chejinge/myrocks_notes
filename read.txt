1.读流程概要描述：

【Read 流程】如下：

在 MemTable 中查找，无法命中转到下一流程；
在 immutable memtable 中查找，查找不中转到下一流程；
在第0层SSTable中查找，无法命中转到下一流程；
对于L0 的文件，RocksDB 采用遍历的方法查找，所以为了查找效率 RocksDB 会控制 L0 的文件个数。
在剩余SSTable中查找。
对于 L1 层以及 L1 层以上层级的文件，每个 SSTable 没有交叠，即 Key 没有重复，可以使用二分查找快速找到 key 所在的 Level 以及 SST。


2.read流程图

mysql_execute_command
--execute_sqlcom_select
----handle_select
------mysql_select
--------mysql_execute_select
----------JOIN::exec
------------do_select
--------------sub_select
----------------join_init_read_record
------------------init_read_record
--------------------handler::ha_rnd_init
----------------------myrocks::ha_rocksdb::rnd_init

myrocks::ha_rocksdb::rnd_init
--myrocks::get_or_create_tx
--myrocks::ha_rocksdb::setup_read_decoders
--myrocks::ha_rocksdb::setup_iterator_for_rnd_scan
----myrocks::Rdb_key_def::get_first_key
------myrocks::Rdb_key_def::get_infimum_key
--------myrocks::rdb_netbuf_store_index
----myrocks::ha_rocksdb::setup_scan_iterator
------myrocks::get_or_create_tx
------myrocks::ha_rocksdb::check_bloom_and_set_bounds
--------myrocks::ha_rocksdb::can_use_bloom_filter
--------myrocks::ha_rocksdb::setup_iterator_bounds
------myrocks::Rdb_transaction::get_iterator
--------myrocks::Rdb_transaction_impl::acquire_snapshot
----------TransactionBaseImpl::SetSnapshot
------------rocksdb::DBImpl::GetSnapshotForWriteConflictBoundary
--------------rocksdb::DBImpl::GetSnapshotImpl
----------------rocksdb::SnapshotList::New
------------rocksdb::TransactionBaseImpl::SetSnapshotInternal
----------rocksdb::TransactionBaseImpl::GetSnapshot
----------myrocks::Rdb_transaction::snapshot_created
----rocksdb::BaseDeltaIterator::Seek//setup_iterator_for_rnd_scan
------rocksdb::DBIter::Seek
--------rocksdb::MemTableIterator::Seek
----------rocksdb::(anonymous namespace)::SkipListRep::Iterator::Seek
------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::Iterator::Seek
--------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::FindGreaterOrEqual 
--------rocksdb::DBIter::FindNextUserEntry
----------rocksdb::DBIter::FindNextUserEntryInternal
------rocksdb::WBWIIteratorImpl::Seek
--------rocksdb::SkipList<rocksdb::WriteBatchIndexEntry*, rocksdb::WriteBatchEntryComparator const&>::Iterator::Seek
----------rocksdb::SkipList<rocksdb::WriteBatchIndexEntry*, rocksdb::WriteBatchEntryComparator const&>::FindGreaterOrEqual
------rocksdb::BaseDeltaIterator::UpdateCurrent


do_select
--sub_select
----join_init_read_record
------init_read_record
--------handler::ha_rnd_init
----------myrocks::ha_rocksdb::rnd_init
----rr_sequential
------handler::ha_rnd_next
--------myrocks::ha_rocksdb::rnd_next
----------myrocks::ha_rocksdb::rnd_next_with_direction
------------rocksdb::BaseDeltaIterator::Next
--------------rocksdb::BaseDeltaIterator::Advance
----------------rocksdb::BaseDeltaIterator::AdvanceBase
----------------rocksdb::ArenaWrappedDBIter::Next
------------------rocksdb::ArenaWrappedDBIter::Next
--------------------rocksdb::DBIter::Next
----------------------rocksdb::MemTableIterator::Next
------------------------rocksdb::(anonymous namespace)::SkipListRep::Iterator::Next 
--------------------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::Node::Next
----------------------rocksdb::DBIter::FindNextUserEntry
------------------------rocksdb::DBIter::FindNextUserEntryInternal
----------------rocksdb::BaseDeltaIterator::UpdateCurrent
------------myrocks::ha_rocksdb::convert_record_from_storage_format
--------------myrocks::ha_rocksdb::convert_field_from_storage_format
--------------Field::move_field
--------------myrocks::ha_rocksdb::convert_varchar_from_storage_format
----evaluate_join_record
------myrocks::ha_rocksdb::unlock_row


3.整体逻辑
RocksDB的读相关操作在逻辑上并不复杂，基本继承了LevelDB的流程步骤，但在细节上有了很多优化，并额外引入了column family的概念。

--对外接口层
		DB：level最外层接口
		Snapshot：主要作用是记录当前sequenceNumber，干涉compaction的合并数据。
		
--逻辑层
		DBImpl：组织各个组件的中控层。
		VersionSet: 管理所有Version的生命周期。
		Version：1.接受最外层接口的请求，并转发到sstable层，同时记录compaction的状态。2.管理iterators。3.管理mainfest文件。
		
--存储层
		SSTable：管理levelDB文件存储层的核心组件。
		Memtable：核心操作由skiplist实现。
		Log::Writer：写入binlog
		
--OS适配层
		Env：操作系统接口，负责对接操作系统功能，隐藏系统细节。包括：1.文件操作。2.定时任务。
		
当用户通过Get（）接口进行key-value pair搜索时，会拿到一个超级版本supper version，并依次从memtable、immutable memtable队列、sstable缓存中搜索。

4.对外接口		
	