1.读流程概要描述：

【Read 流程】如下：

在 MemTable 中查找，无法命中转到下一流程；
在 immutable memtable 中查找，查找不中转到下一流程；
在第0层SSTable中查找，无法命中转到下一流程；
对于L0 的文件，RocksDB 采用遍历的方法查找，所以为了查找效率 RocksDB 会控制 L0 的文件个数。
在剩余SSTable中查找。
对于 L1 层以及 L1 层以上层级的文件，每个 SSTable 没有交叠，即 Key 没有重复，可以使用二分查找快速找到 key 所在的 Level 以及 SST。


2.read流程图

mysql_execute_command
--execute_sqlcom_select
----handle_select
------mysql_select
--------mysql_execute_select
----------JOIN::exec
------------do_select
--------------sub_select
----------------join_init_read_record
------------------init_read_record
--------------------handler::ha_rnd_init
----------------------myrocks::ha_rocksdb::rnd_init

myrocks::ha_rocksdb::rnd_init
--myrocks::get_or_create_tx
--myrocks::ha_rocksdb::setup_read_decoders
--myrocks::ha_rocksdb::setup_iterator_for_rnd_scan
----myrocks::Rdb_key_def::get_first_key
------myrocks::Rdb_key_def::get_infimum_key
--------myrocks::rdb_netbuf_store_index
----myrocks::ha_rocksdb::setup_scan_iterator
------myrocks::get_or_create_tx
------myrocks::ha_rocksdb::check_bloom_and_set_bounds
--------myrocks::ha_rocksdb::can_use_bloom_filter
--------myrocks::ha_rocksdb::setup_iterator_bounds
------myrocks::Rdb_transaction::get_iterator
--------myrocks::Rdb_transaction_impl::acquire_snapshot
----------TransactionBaseImpl::SetSnapshot
------------rocksdb::DBImpl::GetSnapshotForWriteConflictBoundary
--------------rocksdb::DBImpl::GetSnapshotImpl
----------------rocksdb::SnapshotList::New
------------rocksdb::TransactionBaseImpl::SetSnapshotInternal
----------rocksdb::TransactionBaseImpl::GetSnapshot
----------myrocks::Rdb_transaction::snapshot_created
----rocksdb::BaseDeltaIterator::Seek//setup_iterator_for_rnd_scan
------rocksdb::DBIter::Seek
--------rocksdb::MemTableIterator::Seek
----------rocksdb::(anonymous namespace)::SkipListRep::Iterator::Seek
------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::Iterator::Seek
--------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::FindGreaterOrEqual 
--------rocksdb::DBIter::FindNextUserEntry
----------rocksdb::DBIter::FindNextUserEntryInternal
------rocksdb::WBWIIteratorImpl::Seek
--------rocksdb::SkipList<rocksdb::WriteBatchIndexEntry*, rocksdb::WriteBatchEntryComparator const&>::Iterator::Seek
----------rocksdb::SkipList<rocksdb::WriteBatchIndexEntry*, rocksdb::WriteBatchEntryComparator const&>::FindGreaterOrEqual
------rocksdb::BaseDeltaIterator::UpdateCurrent


do_select
--sub_select
----join_init_read_record
------init_read_record
--------handler::ha_rnd_init
----------myrocks::ha_rocksdb::rnd_init
----rr_sequential
------handler::ha_rnd_next
--------myrocks::ha_rocksdb::rnd_next
----------myrocks::ha_rocksdb::rnd_next_with_direction
------------rocksdb::BaseDeltaIterator::Next
--------------rocksdb::BaseDeltaIterator::Advance
----------------rocksdb::BaseDeltaIterator::AdvanceBase
----------------rocksdb::ArenaWrappedDBIter::Next
------------------rocksdb::ArenaWrappedDBIter::Next
--------------------rocksdb::DBIter::Next
----------------------rocksdb::MemTableIterator::Next
------------------------rocksdb::(anonymous namespace)::SkipListRep::Iterator::Next 
--------------------------rocksdb::InlineSkipList<rocksdb::MemTableRep::KeyComparator const&>::Node::Next
----------------------rocksdb::DBIter::FindNextUserEntry
------------------------rocksdb::DBIter::FindNextUserEntryInternal
----------------rocksdb::BaseDeltaIterator::UpdateCurrent
------------myrocks::ha_rocksdb::convert_record_from_storage_format
--------------myrocks::ha_rocksdb::convert_field_from_storage_format
--------------Field::move_field
--------------myrocks::ha_rocksdb::convert_varchar_from_storage_format
----evaluate_join_record
------myrocks::ha_rocksdb::unlock_row


3.整体逻辑
RocksDB的读相关操作在逻辑上并不复杂，基本继承了LevelDB的流程步骤，但在细节上有了很多优化，并额外引入了column family的概念。

--对外接口层
		DB：level最外层接口
		Snapshot：主要作用是记录当前sequenceNumber，干涉compaction的合并数据。
		
--逻辑层
		DBImpl：组织各个组件的中控层。
		VersionSet: 管理所有Version的生命周期。
		Version：1.接受最外层接口的请求，并转发到sstable层，同时记录compaction的状态。2.管理iterators。3.管理mainfest文件。
		
--存储层
		SSTable：管理levelDB文件存储层的核心组件。
		Memtable：核心操作由skiplist实现。
		Log::Writer：写入binlog
		
--OS适配层
		Env：操作系统接口，负责对接操作系统功能，隐藏系统细节。包括：1.文件操作。2.定时任务。
		
当用户通过Get（）接口进行key-value pair搜索时，会拿到一个超级版本supper version，并依次从memtable、immutable memtable队列、sstable缓存中搜索。





8.读流程
select * from t where id=1
	-- 在 WriteBatch 中查找
	-- 在Memable 中查找
	-- 在 Immutable MemTable 中查找
	-- 在Block Cache和SST 文件中查找


9.Fraction Cascading
 1层以上并且该层文件数多于3才会执行。
 在某一层进行查询时，会根据比较的结果设置查询的上限和下限。
 在下一层进行查询时，会使用这个查询的上限和下限减少文件搜索的范围。
 
还是没搞明白什么是 Fraction Cascading.
  
10.读流程 iterator操作相关
构建数据的 Iterator
通过Seek函数定位 记录的可能位置
执行Next并进行过 滤，合并


 Iterator 
	 Seek 
	 Next
	 Prev
	 SeekToFirst 
	 SeekToLast 
	 key
	 value

DBIter
--MergingIterator
---- MemTable Iterator
---- Table Iterator

上层Iterator的Seek或Next函数会调用下层Iterator的Seek或Next函数， 取决于上层Iterator的工作内容，下层Iterator的相应函数可能会调用多次。

11.范围查询搜索过程

select * from t where id>=1 层级搜索
		1. 通过VersionStroageInfo类可以获得文件元数据，包括每个文件包含Key的最大 值和最小值等，这些信息随文件的变化而维护。
		2. 通过二分搜索找到可能包含Key的文件。
		3. 对于第0层，由于范围重叠，必须要扫描每个文件。


select * from t where id>=1 文件内部搜索
		1. 从Footer定位 IndexBlock
		2. 使用Index Block得到offset， 计算filter编号， 然后使用Filter Block中的offset array获得filter， 使用filter与Key 判断是否Match
		3. 根据offset，获 取Data Block


select * from t where id>=1 Index搜索
		每个Data Block有一个 索引项，索引项的Key 大于等于前Data Block 的最大Key，小于后 Data Block的最小Key.


select * from t where id>=1 Block内部搜索
		1. 从结尾读取 num_restarts获得 Restart数组的起始位 置，由于每个Restart 项长度固定，可以计算 出第i个项的位置。
		2. 在Restart Point 区域二分查询，找 到恰好较小的重启 点。
		3. 使用重启点定位 一条Record，向下 顺序搜索，找到恰 好较大或等于的记 录。

select * from t where id>=1 合并与遍历
		1.使用堆排序将 多层列表合并 为一个
		2.在遍历这个有 序列表时，去 除新版本元素
		3.去除重复、被 删除的元素， 并做Merge
		4.将WriteBatch 的操作更新到 列表上
		
12.MVCC
	--MVCC实现
		 当前事务的写入在提交前存储在自己的WriteBatch中，其他事务读取不到。
		 RR隔离级别下，事务的读取在第一次执行读取操作时获取SequenceNumber。 
		 读取过程中会过滤大于SequenceNumber的记录。

	--MVCC等值查询和范围查询
		 在等值查询和范围查询中略有不同。
		 等值查询中，当在Iterator中执行Seek操作时，由于Key的比较规则， SequenceNumber较大的项已被跳过，而在Next操作中，不会找到不等于目标 Key的项;
		 而在范围查询中Sequence Number较大的项可能在Next操作中被取出来，因此 需要再次进行过滤。
		
	--范围查询例子
		Select * from t where id >= 5;
		给出一个Seek和Next过程中实现MVCC的例子，假设有列表(元素格式为Key: SequenceNumber):[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，当前快照Sequence Number值为9.
		Seek(5)
		[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]
		Next
		1, 向前一步，得到[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，发现重复，跳过。
		2, 向前两步，得到[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，Sequence Number不符合跳过。 3, 向前三步，得到[5:10, 5:9, 5:8, 6:10, 6:9, 6:8]，符合，Next结束。		
		
		
等值查询
	Memtable
	--SkipList iterator
	--TableReader(Filter, MVCC)
	----Block Iterator
	--GetContext(Merge)//会一直传下去
	
范围查询		
	MemTableIterator
	--SkipList Iterator
	DBIter(去重，MVCC，Merge)	
	TableIterator (Filter)
	--BlockIterator
		
		
		
		
		