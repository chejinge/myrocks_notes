1.写入流程概要流程：

写入流程可以分为以下三步：

将解析后的记录( key-value )写入到 WriteBatch
将WAL日志写入log文件
将WriteBatch中的内容写到memtable中，事务完成
其中，2、3 两步在 commit 阶段完成。

在 MyRocks 中，复用了 MySQL 的主从同步流程，因此，在开启 binlog 的情况下，还需要写入 binlog。




3.myrocks各种写操作。
插入操作比较好理解，直接写入writebatch就可 以了。

 删除操作在writebatch里本质上也是写入，只不过是标记了待删除的key。

 对应到Myrocks，如果更新主键或二级索引（RocksDB的key区域），会删除原有记录，插入新纪录，其他情况会直接插入新数据不会删除原有的数据。
 
 在具体写入数据时，会先写WAL日志，然后将key-value插入Memtable，Memtable满了或者其他条件被触发后会构造新的Memtable，并将老的Memtable转化为只读的immutable Memtable。immutable Memtable达到一定数量后需要刷盘成为SStable，初始层号为L0，后期L0还将通过compact向高层级合
并。

以上就是RocksDB在LSM数理论上的实现逻辑。下面我们透过代码来看具体实现。选用的版本为github/facebook/rocksdb，2018年7月11日版本（commit：35b38a232c1d357a7a885b9b4b8442e24a8433d7 ）

4.总体模块划分
我们可以将实现过程大致抽象为：外部接口层、数据库逻辑层、WriteBatch层、Memtable层，再往下还有跳表层操作，以及后续的Memtable切换和Flush到SStable等操作。




