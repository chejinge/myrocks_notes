1.记录格式
向表 t1 中插入一行数据
	mysql> SELECT * FROM t1;
	+----+------+------+
	| id | a    | b    |
	+----+------+------+
	|  1 |    1 | a    |
	+----+------+------+
	1 row in set (0.00 sec)


主键索引记录
	key: index_id, M(pk)
	value: unpack_info, NULL-bitmap,a,b


	index_id：索引 ID，全局唯一，4B
	M(pk)：转化后的主键，转化后的 pk 可以直接 memcmp
	unpack_info：pk 逆转化的信息
	NULL-bitmap： 表示为 NULL 的字段
	a/b：数据
	综上：数据与主键索引保存在一起，MyRocks 的主键索引为聚簇索引



二级索引记录
	key: index_id,NULL-byte, M(b),M(pk)
	value: unpack_info


	index_id：二级索引 ID
	NULL-byte：索引 b 是否为空
	M(b)：转化后的二级索引
	M(pk)：转化后的主键
	unpack_info：逆转化信息


2.索引转化
rocksdb为了比较方便，将key字段转化为可以直接memcmp比较的形式。

（1） 整型
	需要考虑符号位
	
	1 表示为：00000000 00000000 00000000 00000001
	0x00 00000000
	0x01 00000000
	0x02 00000000
	0x03 00000001
	-1 表示为：11111111 11111111 11111111 11111111
	0x00 11111111
	0x01 11111111
	0x02 11111111
	0x03 11111111
	直接比较，则 -1 > 1，因此需要转化，规则为：0x00 ^ 128 (1000 0000)
	
	1 表示为：
	0x00 10000000  -> 0x80
	0x01 00000000  -> 0x00
	0x02 00000000  -> 0x00
	0x03 00000001  -> 0x01
	-1 表示为：
	0x00 01111111  -> 0x7F
	0x01 11111111  -> 0xFF
	0x02 11111111  -> 0xFF
	0x03 11111111  -> 0xFF
	转化后可以直接比较 1 > -1

（2） char
	不足的位直接补空格 0x20

（3） varchar
	const int VARCHAR_CMP_LESS_THAN_SPACES = 1;
	const int VARCHAR_CMP_EQUAL_TO_SPACES = 2;
	const int VARCHAR_CMP_GREATER_THAN_SPACES = 3;
	 
	 Example: m_segment_size=5, collation=latin1_bin:
	 
	  'abcd\0'   => [ 'abcd' <VARCHAR_CMP_LESS> ][ '\0    ' <VARCHAR_CMP_EQUAL> ]
	  'abcd'     => [ 'abcd' <VARCHAR_CMP_EQUAL>]
	  'abcd   '  => [ 'abcd' <VARCHAR_CMP_EQUAL>]
	  'abcdZZZZ' => [ 'abcd' <VARCHAR_CMP_GREATER>][ 'ZZZZ' <VARCHAR_CMP_EQUAL> ]
  
3.key 的封装
将 key 封装为 internal key
	user_key：key	
	seq_num：全局递增 sequence，用于 MVCC
	value_type：put、merge、delete


	将 internal key 封装为 memtable key，memtable 中的最终数据格式
	
三个概念：
	逻辑key（纯粹的payload），
	internal key(增加seqence num, value type，用于rocksdb磁盘存储), 
	memtable key(增加key size, value size 用于memtable).
	
4.插入一行数据
	mysql> SELECT * FROM t1;
	+----+------+------+
	| id | a    | b    |
	+----+------+------+
	|  1 |    1 | a    |
	+----+------+------+
	1 row in set (0.00 sec)
	 
	 
	mysql> SELECT COLUMN_FAMILY,INDEX_NUMBER,SST_NAME FROM INFORMATION_SCHEMA.ROCKSDB_INDEX_FILE_MAP WHERE INDEX_NUMBER IN (SELECT INDEX_NUMBER FROM INFORMATION_SCHEMA.ROCKSDB_DDL WHERE TABLE_NAME = 't1');
	+---------------+--------------+------------+
	| COLUMN_FAMILY | INDEX_NUMBER | SST_NAME   |
	+---------------+--------------+------------+
	|             0 |          264 | 000134.sst |
	|             4 |          265 | 000136.sst |
	+---------------+--------------+------------+



（1）主键索引：保存在 000134.sst

	'0000010880000001' seq:108, type:1 => 0001000000 6120202020202020
	key：0000010880000001
	index_id：264  -> 0x108 -> 0x00 0x00 0x01 0x08
	M(pk)：1 -> 0x80 0x00 0x00 0x01，符号位翻转
	seq：108
	type：1 -> PUT
	value：00010000006120202020202020
	NULL-bitmap：0x00 ，每一位对应一列，a\b 两列均非空 -> 0x00
	column a：0x01 0x00 0x00 0x00
	数字1 大端表示形式
	column b：0x61 0x20 0x20 0x20 0x20 0x20 0x20 0x20
	'a' -> 0x61
	补7个空格 -> 0x20


（2）辅助索引：保存在 000136.sst


	'0000010901612020202020202080000001' seq:109, type:1 =>
	key：0000010901612020202020202080000001
	index_id：265 -> 0x109 -> 0x00 0x00 0x01 0x09
	NULL-byte：0x01，标识字段 b 是否可以为NULL
	M(b)：‘a[ ]*7’ -> 0x61  0x20 0x20 0x20 0x20 0x20 0x20 0x20
	M(id)：0x80 0x00 0x00 0x01
	seq_num：109
	type：1 -> PUT
	value：NULL
	pack_info：无需额外的逆转化信息，该字段为 NULL
	
5.源码分析
（1）操作类型，例如 delete 操作的 type 为 kTypeDeletion = 0x0
		// dbformat.h 定义的操作类型
		// Value types encoded as the last component of internal keys.
		// DO NOT CHANGE THESE ENUM VALUES: they are embedded in the on-disk
		// data structures.
		// The highest bit of the value type needs to be reserved to SST tables
		// for them to do more flexible encoding.
		enum ValueType : unsigned char {
		  kTypeDeletion = 0x0,
		  kTypeValue = 0x1,
		  kTypeMerge = 0x2,
		  kTypeLogData = 0x3,               // WAL only.
		  kTypeColumnFamilyDeletion = 0x4,  // WAL only.
		  kTypeColumnFamilyValue = 0x5,     // WAL only.
		  kTypeColumnFamilyMerge = 0x6,     // WAL only.
		  kTypeSingleDeletion = 0x7,
		  kTypeColumnFamilySingleDeletion = 0x8,  // WAL only.
		  kTypeBeginPrepareXID = 0x9,             // WAL only.
		  kTypeEndPrepareXID = 0xA,               // WAL only.
		  kTypeCommitXID = 0xB,                   // WAL only.
		  kTypeRollbackXID = 0xC,                 // WAL only.
		  kTypeNoop = 0xD,                        // WAL only.
		  kTypeColumnFamilyRangeDeletion = 0xE,   // WAL only.
		  kTypeRangeDeletion = 0xF,               // meta block
		  kTypeColumnFamilyBlobIndex = 0x10,      // Blob DB only
		  kTypeBlobIndex = 0x11,                  // Blob DB only
		  // When the prepared record is also persisted in db, we use a different
		  // record. This is to ensure that the WAL that is generated by a WritePolicy
		  // is not mistakenly read by another, which would result into data
		  // inconsistency.
		  kTypeBeginPersistedPrepareXID = 0x12,  // WAL only.
		  kMaxValue = 0x7F                       // Not used for storing records.
		};


（2）Internal Key 的比较：
	user key 升序比较
	sequence number 降序比较
	在 memtable 中排序时，全局递增、局部递减，目的是保证 sequence number 大的数据（最新的数据）靠前存放，提高查找效率
	因此，sequence number 是直接存放的，没有进行亦或等转化
	dbformat.cc:111，就是想 memtable 中插入时，确定插入位置的 compare 方法
	int InternalKeyComparator::Compare(const ParsedInternalKey& a,
	                                   const ParsedInternalKey& b) const {
	  // Order by:
	  //    increasing user key (according to user-supplied comparator)
	  //    decreasing sequence number
	  //    decreasing type (though sequence# should be enough to disambiguate)
	  int r = user_comparator_->Compare(a.user_key, b.user_key);
	  PERF_COUNTER_ADD(user_key_comparison_count, 1);
	  if (r == 0) {
	    if (a.sequence > b.sequence) {
	      r = -1;
	    } else if (a.sequence < b.sequence) {
	      r = +1;
	    } else if (a.type > b.type) {
	      r = -1;
	    } else if (a.type < b.type) {
	      r = +1;
	    }
	  }
	  return r;
	}

（3）write batch 中的 rep_ 成员就是需要写入到 memtable 中数据，其中保存了 sequence number、count、data，其具体结构如下
	write_batch.cc:10 注释
	// WriteBatch::rep_ :=
	//    sequence: fixed64
	//    count: fixed32
	//    data: record[count]
	// record :=
	//    kTypeValue varstring varstring
	//    kTypeDeletion varstring
	//    kTypeSingleDeletion varstring
	//    kTypeRangeDeletion varstring varstring
	//    kTypeMerge varstring varstring
	//    kTypeColumnFamilyValue varint32 varstring varstring
	//    kTypeColumnFamilyDeletion varint32 varstring
	//    kTypeColumnFamilySingleDeletion varint32 varstring
	//    kTypeColumnFamilyRangeDeletion varint32 varstring varstring
	//    kTypeColumnFamilyMerge varint32 varstring varstring
	//    kTypeBeginPrepareXID varstring
	//    kTypeEndPrepareXID
	//    kTypeCommitXID varstring
	//    kTypeRollbackXID varstring
	//    kTypeBeginPersistedPrepareXID varstring
	//    kTypeNoop
	// varstring :=
	//    len: varint32
	//    data: uint8[len]
